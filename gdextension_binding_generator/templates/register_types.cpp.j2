/**
 * This file is generated by the binding generator.
 * It implements the GDExtension registration hooks and the entry point for the module.
 *
 * The entry symbol referenced by your .gdextension file is:
 *   {{ prefix }}library_init
 */

#include "register_types.h"

#include <godot_cpp/godot.hpp>
#include <godot_cpp/core/class_db.hpp>

{% for c in classes -%}
#include "classes/{{ c.wrapper_name }}.h"
{% endfor %}

using namespace godot;

void {{ prefix }}initialize_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }

    // Register wrapped classes
    {% for c in classes %}
    GDREGISTER_CLASS({{ c.wrapper_name }});
    {% endfor %}
}

void {{ prefix }}uninitialize_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
    // Teardown logic (if any) goes here.
}

extern "C" {
    GDExtensionBool GDE_EXPORT {{ prefix }}library_init(
        GDExtensionInterfaceGetProcAddress p_get_proc_address,
        const GDExtensionClassLibraryPtr p_library,
        GDExtensionInitialization *r_initialization
    ) {
        godot::GDExtensionBinding::InitObject init_obj(
            p_get_proc_address, p_library, r_initialization
        );

        init_obj.register_initializer({{ prefix }}initialize_module);
        init_obj.register_terminator({{ prefix }}uninitialize_module);
        init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);

        return init_obj.init();
    }
}
